name: JIT
on: push
jobs:
  jit:
    name: ${{ matrix.target }} (${{ matrix.debug && 'Debug' || 'Release' }}, LLVM ${{ matrix.llvm }})
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        target:
          # - i686-pc-windows-msvc/msvc
          - x86_64-pc-windows-msvc/msvc
          # - x86_64-apple-darwin/clang
          # - x86_64-unknown-linux-gnu/gcc
          # - aarch64-apple-darwin/clang
          # - aarch64-unknown-linux-gnu/gcc
          # - aarch64-unknown-linux-gnu/clang
          # - powerpc64le-unknown-linux-gnu/gcc
          # - x86_64-unknown-linux-gnu/clang
        debug:
          - true
          # - false
        llvm:
          #- 14
          #- 15
          - 16
        include:
          # - target: i686-pc-windows-msvc/msvc
          #   architecture: i686
          #   runner: windows-latest
          #   compiler: msvc
          #   tier: 1
          #   windows_platform: Win32
          - target: x86_64-pc-windows-msvc/msvc
            architecture: x86_64
            runner: windows-latest
            compiler: msvc
            tier: 1
            windows_platform: x64
          # - target: x86_64-apple-darwin/clang
          #   architecture: x86_64
          #   runner: macos-latest
          #   compiler: clang
          #   tier: 1
          # - target: x86_64-unknown-linux-gnu/gcc
          #   architecture: x86_64
          #   runner: ubuntu-latest
          #   compiler: gcc
          #   tier: 1
          # - target: aarch64-apple-darwin/clang
          #   architecture: aarch64
          #   runner: macos-latest
          #   compiler: clang
          #   tier: 2
          # - target: aarch64-unknown-linux-gnu/gcc
          #   architecture: aarch64
          #   runner: ubuntu-latest
          #   compiler: gcc
          #   tier: 2
          # - target: aarch64-unknown-linux-gnu/clang
          #   architecture: aarch64
          #   runner: ubuntu-latest
          #   compiler: clang
          #   tier: 2
          # - target: powerpc64le-unknown-linux-gnu/gcc
          #   architecture: ppc64le
          #   runner: ubuntu-latest
          #   compiler: gcc
          #   tier: 2
          # - target: x86_64-unknown-linux-gnu/clang
          #   architecture: x86_64
          #   runner: ubuntu-latest
          #   compiler: clang
          #   tier: 2
    env:
      CC: ${{ matrix.compiler }}
      PYTHON_LLVM_VERSION: ${{ matrix.llvm }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Cache LLVM and Clang
        id: cache-llvm
        uses: actions/cache@v3
        with:
            path: |
              C:/Program Files/LLVM
              ./llvm
            key: llvm-${{ matrix.llvm }}
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "${{ matrix.llvm }}"
          cached: ${{ steps.cache-llvm.outputs.cache-hit }}
      # Only support Window x64 ~ Jules
      # - name: macOS
      #   if: runner.os == 'macOS'
      #   run: |
      #     brew install llvm@${{ matrix.llvm }}
      #     export SDKROOT="$(xcrun --show-sdk-path)"
      #     ./configure ${{ matrix.debug && '--with-pydebug' || '--enable-optimizations --with-lto' }}
      #     make
      #     ./python.exe -m test -j0 -wW
      # - name: Native Linux
      #   if: runner.os == 'Linux' && matrix.architecture == 'x86_64'
      #   run: |
      #     sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)" ./llvm.sh ${{ matrix.llvm }}
      #     ${{ matrix.llvm == 14 && 'sudo apt install libclang-rt-14-dev' || '' }}
      #     export PATH="$(llvm-config-${{ matrix.llvm }} --bindir):$PATH"
      #     ./configure ${{ matrix.debug && '--with-pydebug' || '--enable-optimizations --with-lto' }}
      #     make
      #     ./python -m test -j0 -wW
      # - name: Emulated Linux
      #   if: runner.os == 'Linux' && matrix.architecture != 'x86_64'
      #   uses: uraimo/run-on-arch-action@v2
      #   with:
      #     arch: ${{ matrix.architecture }}
      #     distro: ubuntu_latest
      #     run: |
      #       sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)" ./llvm.sh ${{ matrix.llvm }}
      #       ${{ matrix.llvm == 14 && 'sudo apt install libclang-rt-14-dev' || '' }}
      #       export PATH="$(llvm-config-${{ matrix.llvm }} --bindir):$PATH"
      #       ./configure ${{ matrix.debug && '--with-pydebug' || '--enable-optimizations --with-lto' }}
      #       make
      #       ./python -m test -j0 -wW
      - name: Windows
        if: runner.os == 'Windows'
        run: |
          ./PCbuild/build ${{ matrix.debug && '-d' || '--pgo' }} -p ${{ matrix.windows_platform }}
      # ./PCbuild/rt${{ matrix.debug && ' -d' || '' }} -p ${{ matrix.windows_platform }} -q -j0 -wW          
      - name: Tests
        run: .\python.bat tier2_test.py
